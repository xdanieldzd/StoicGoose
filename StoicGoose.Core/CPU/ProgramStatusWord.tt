<#@ include file="$(TemplateIncludeFolder)\Header.ttinclude" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.IO" #>
<#
var flags = new []
{
	new { shortName = "carry",		longName = "Carry",				bitNumber = 0 },
	new { shortName = "parity",		longName = "Parity",			bitNumber = 2 },
	new { shortName = "auxCarry",	longName = "AuxiliaryCarry",	bitNumber = 4 },
	new { shortName = "zero",		longName = "Zero",				bitNumber = 6 },
	new { shortName = "sign",		longName = "Sign",				bitNumber = 7 },
	new { shortName = "brk",		longName = "Break",				bitNumber = 8 },
	new { shortName = "intEnable",	longName = "InterruptEnable",	bitNumber = 9 },
	new { shortName = "direction",	longName = "Direction",			bitNumber = 10 },
	new { shortName = "overflow",	longName = "Overflow",			bitNumber = 11 }
};
#>

namespace StoicGoose.Core.CPU
{
	public class ProgramStatusWord
	{
<# foreach (var flag in flags) { #>
		const ushort <#= flag.shortName #>Bit = 1 << <#= flag.bitNumber #>;
		bool <#= flag.shortName #>;
		public bool <#= flag.longName #> { get => <#= flag.shortName #>; set => <#= flag.shortName #> = value; }

<# } #>
		public ushort Value
		{
			get => (ushort)(
<# foreach (var flag in flags) { #>
				(<#= flag.shortName #> ? <#= flag.shortName #>Bit : 0) |
<# } #>
				0b1111000000000010);
			set
			{
<# foreach (var flag in flags) { #>
				<#= flag.shortName #> = (value & <#= flag.shortName #>Bit) == <#= flag.shortName #>Bit;
<# } #>
			}
		}

		public static implicit operator ProgramStatusWord(ushort value) => new() { Value = value };
	}
}
