<#@ include file="$(TemplateIncludeFolder)\Header.ttinclude" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#
const int numInstructions = 256;

var handlers = new string[numInstructions]
{
	"Wait(1); modRM = Fetch8(); SetMemory8(ADD(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(ADD(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(ADD(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(ADD(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = ADD(aw.Low, Fetch8());",
	"Wait(1); aw.Word = ADD(aw.Word, Fetch16());",
	"Wait(1); PUSH(ds1);",
	"Wait(2); ds1 = POP();",
	"Wait(1); modRM = Fetch8(); SetMemory8(OR(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(OR(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(OR(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(OR(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = OR(aw.Low, Fetch8());",
	"Wait(1); aw.Word = OR(aw.Word, Fetch16());",
	"Wait(1); PUSH(ps);",
	"/* invalid */",
	"Wait(1); modRM = Fetch8(); SetMemory8(ADDC(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(ADDC(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(ADDC(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(ADDC(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = ADDC(aw.Low, Fetch8());",
	"Wait(1); aw.Word = ADDC(aw.Word, Fetch16());",
	"Wait(1); PUSH(ss);",
	"Wait(2); ss = POP();",
	"Wait(1); modRM = Fetch8(); SetMemory8(SUBC(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(SUBC(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(SUBC(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(SUBC(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = SUBC(aw.Low, Fetch8());",
	"Wait(1); aw.Word = SUBC(aw.Word, Fetch16());",
	"Wait(1); PUSH(ds0);",
	"Wait(2); ds0 = POP();",
	"Wait(1); modRM = Fetch8(); SetMemory8(AND(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(AND(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(AND(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(AND(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = AND(aw.Low, Fetch8());",
	"Wait(1); aw.Word = AND(aw.Word, Fetch16());",
	"/* Prefix Segment DS1 */",
	"Wait(10); ADJ4x(false);",
	"Wait(1); modRM = Fetch8(); SetMemory8(SUB(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(SUB(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(SUB(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(SUB(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = SUB(aw.Low, Fetch8());",
	"Wait(1); aw.Word = SUB(aw.Word, Fetch16());",
	"/* Prefix Segment PS */",
	"Wait(10); ADJ4x(true);",
	"Wait(1); modRM = Fetch8(); SetMemory8(XOR(GetMemory8(), GetRegister8()));",
	"Wait(1); modRM = Fetch8(); SetMemory16(XOR(GetMemory16(), GetRegister16()));",
	"Wait(1); modRM = Fetch8(); SetRegister8(XOR(GetRegister8(), GetMemory8()));",
	"Wait(1); modRM = Fetch8(); SetRegister16(XOR(GetRegister16(), GetMemory16()));",
	"Wait(1); aw.Low = XOR(aw.Low, Fetch8());",
	"Wait(1); aw.Word = XOR(aw.Word, Fetch16());",
	"/* Prefix Segment SS */",
	"Wait(9); ADJBx(false);",
	"Wait(1); modRM = Fetch8(); SUB(GetMemory8(), GetRegister8());",
	"Wait(1); modRM = Fetch8(); SUB(GetMemory16(), GetRegister16());",
	"Wait(1); modRM = Fetch8(); SUB(GetRegister8(), GetMemory8());",
	"Wait(1); modRM = Fetch8(); SUB(GetRegister16(), GetMemory16());",
	"Wait(1); SUB(aw.Low, Fetch8());",
	"Wait(1); SUB(aw.Word, Fetch16());",
	"/* Prefix Segment DS0 */",
	"Wait(9); ADJBx(true);",
	"Wait(1); aw.Word = INC(aw.Word);",
	"Wait(1); cw.Word = INC(cw.Word);",
	"Wait(1); dw.Word = INC(dw.Word);",
	"Wait(1); bw.Word = INC(bw.Word);",
	"Wait(1); sp = INC(sp);",
	"Wait(1); bp = INC(bp);",
	"Wait(1); ix = INC(ix);",
	"Wait(1); iy = INC(iy);",
	"Wait(1); aw.Word = DEC(aw.Word);",
	"Wait(1); cw.Word = DEC(cw.Word);",
	"Wait(1); dw.Word = DEC(dw.Word);",
	"Wait(1); bw.Word = DEC(bw.Word);",
	"Wait(1); sp = DEC(sp);",
	"Wait(1); bp = DEC(bp);",
	"Wait(1); ix = DEC(ix);",
	"Wait(1); iy = DEC(iy);",
	"PUSH(aw.Word);",
	"PUSH(cw.Word);",
	"PUSH(dw.Word);",
	"PUSH(bw.Word);",
	"PUSH(sp);",
	"PUSH(bp);",
	"PUSH(ix);",
	"PUSH(iy);",
	"aw.Word = POP();",
	"cw.Word = POP();",
	"dw.Word = POP();",
	"bw.Word = POP();",
	"sp = POP();",
	"bp = POP();",
	"ix = POP();",
	"iy = POP();",
	"Wait(1); var sp = this.sp; PUSH(aw.Word); PUSH(cw.Word); PUSH(dw.Word); PUSH(bw.Word); PUSH(sp); PUSH(bp); PUSH(ix); PUSH(iy);",
	"Wait(1); iy = POP(); ix = POP(); bp = POP(); POP(); bw.Word = POP(); dw.Word = POP(); cw.Word = POP(); aw.Word = POP();",
	"Wait(12); modRM = Fetch8(); CHKIND();",
	"/* invalid */",
	"/* REPNC -- not supported */",
	"/* REPC -- not supported */",
	"/* FPO2 -- not supported */",
	"/* FPO2 -- not supported */",
	"PUSH(Fetch16());",
	"Wait(5); modRM = Fetch8(); SetRegister16((ushort)MUL(GetMemory16(), Fetch16()));",
	"PUSH((ushort)(sbyte)Fetch8());",
	"Wait(5); modRM = Fetch8(); SetRegister16((ushort)MUL(GetMemory16(), Fetch8()));",
	"Wait(5); INM8();",
	"Wait(5); INM16();",
	"Wait(6); OUTM8();",
	"Wait(6); OUTM16();",
	"BranchIf(psw.Overflow);",
	"BranchIf(!psw.Overflow);",
	"BranchIf(psw.Carry);",
	"BranchIf(!psw.Carry);",
	"BranchIf(psw.Zero);",
	"BranchIf(!psw.Zero);",
	"BranchIf(psw.Carry || psw.Zero);",
	"BranchIf(!psw.Carry && !psw.Zero);",
	"BranchIf(psw.Sign);",
	"BranchIf(!psw.Sign);",
	"BranchIf(psw.Parity);",
	"BranchIf(!psw.Parity);",
	"BranchIf(!psw.Zero && psw.Sign != psw.Overflow);",
	"BranchIf(psw.Zero || psw.Sign == psw.Overflow);",
	"BranchIf(psw.Zero || psw.Sign != psw.Overflow);",
	"BranchIf(!psw.Zero && psw.Sign == psw.Overflow);",
	"GroupImmediate8();",
	"GroupImmediate16();",
	"GroupImmediate8();",
	"GroupImmediateSign();",
	"Wait(1); modRM = Fetch8(); AND(GetMemory8(), GetRegister8());",
	"Wait(1); modRM = Fetch8(); AND(GetMemory16(), GetRegister16());",
	"Wait(3); modRM = Fetch8(); var mem = GetMemory8(); var reg = GetRegister8(); SetMemory8(reg); SetRegister8(mem);",
	"Wait(3); modRM = Fetch8(); var mem = GetMemory16(); var reg = GetRegister16(); SetMemory16(reg); SetRegister16(mem);",
	"modRM = Fetch8(); if (modRM.Mod == 0b11) Wait(1); SetMemory8(GetRegister8());",
	"modRM = Fetch8(); if (modRM.Mod == 0b11) Wait(1); SetMemory16(GetRegister16());",
	"modRM = Fetch8(); if (modRM.Mod == 0b11) Wait(1); SetRegister8(GetMemory8());",
	"modRM = Fetch8(); if (modRM.Mod == 0b11) Wait(1); SetRegister16(GetMemory16());",
	"Wait(1); modRM = Fetch8(); SetMemory16(GetSegment());",
	"Wait(1); modRM = Fetch8(); SetRegister16(modRM.Mod == 0b11 ? GetRegister16() : modRM.Address);",
	"Wait(2); modRM = Fetch8(); SetSegment(GetMemory16());",
	"Wait(1); modRM = Fetch8(); SetMemory16(POP());",
	"Wait(3);",
	"Wait(3); (aw.Word, cw.Word) = (cw.Word, aw.Word);",
	"Wait(3); (aw.Word, dw.Word) = (dw.Word, aw.Word);",
	"Wait(3); (aw.Word, bw.Word) = (bw.Word, aw.Word);",
	"Wait(3); (aw.Word, sp) = (sp, aw.Word);",
	"Wait(3); (aw.Word, bp) = (bp, aw.Word);",
	"Wait(3); (aw.Word, ix) = (ix, aw.Word);",
	"Wait(3); (aw.Word, iy) = (iy, aw.Word);",
	"Wait(1); aw.High = (byte)((aw.Low & 0x80) == 0x80 ? 0xFF : 0x00);",
	"Wait(1); dw.Word = (ushort)((aw.Word & 0x8000) == 0x8000 ? 0xFFFF : 0x0000);",
	"Wait(9); var pc = Fetch16(); var ps = Fetch16(); PUSH(this.ps); PUSH(this.pc); this.pc = pc; this.ps = ps;",
	"Wait(1);",
	"Wait(1); PUSH(psw.Value);",
	"Wait(2); psw.Value = POP();",
	"Wait(4); psw.Value = (ushort)((psw.Value & 0xFF00) | aw.High);",
	"Wait(2); aw.High = (byte)(psw.Value & 0x00FF);",
	"aw.Low = ReadMemory8(SegmentViaPrefix(ds0), Fetch16());",
	"aw.Word = ReadMemory16(SegmentViaPrefix(ds0), Fetch16());",
	"WriteMemory8(SegmentViaPrefix(ds0), Fetch16(), aw.Low);",
	"WriteMemory16(SegmentViaPrefix(ds0), Fetch16(), aw.Word);",
	"Wait(3); MOVBK8();",
	"Wait(3); MOVBK16();",
	"Wait(4); CMPBK8();",
	"Wait(4); CMPBK16();",
	"Wait(1); AND(aw.Low, Fetch8());",
	"Wait(1); AND(aw.Word, Fetch16());",
	"Wait(2); STM8();",
	"Wait(2); STM16();",
	"Wait(2); LDM8();",
	"Wait(2); LDM16();",
	"Wait(3); CMPM8();",
	"Wait(3); CMPM16();",
	"Wait(1); aw.Low = Fetch8();",
	"Wait(1); cw.Low = Fetch8();",
	"Wait(1); dw.Low = Fetch8();",
	"Wait(1); bw.Low = Fetch8();",
	"Wait(1); aw.High = Fetch8();",
	"Wait(1); cw.High = Fetch8();",
	"Wait(1); dw.High = Fetch8();",
	"Wait(1); bw.High = Fetch8();",
	"Wait(1); aw.Word = Fetch16();",
	"Wait(1); cw.Word = Fetch16();",
	"Wait(1); dw.Word = Fetch16();",
	"Wait(1); bw.Word = Fetch16();",
	"Wait(1); sp = Fetch16();",
	"Wait(1); bp = Fetch16();",
	"Wait(1); ix = Fetch16();",
	"Wait(1); iy = Fetch16();",
	"Wait(3); GroupShift8(0, true);",
	"Wait(3); GroupShift16(0, true);",
	"Wait(5); var offset = Fetch16(); pc = POP(); sp += offset;",
	"Wait(5); pc = POP();",
	"Wait(4); modRM = Fetch8(); SetRegister16(GetMemory16(0)); ds1 = GetMemory16(2);",
	"Wait(4); modRM = Fetch8(); SetRegister16(GetMemory16(0)); ds0 = GetMemory16(2);",
	"modRM = Fetch8(); SetMemory8(Fetch8());",
	"modRM = Fetch8(); SetMemory16(Fetch16());",
	"PREPARE();",
	"DISPOSE();",
	"Wait(8); var offset = Fetch16(); pc = POP(); ps = POP(); sp += offset;",
	"Wait(7); pc = POP(); ps = POP();",
	"Wait(8); Interrupt(3);",
	"Wait(9); Interrupt(Fetch8());",
	"Wait(5); if (psw.Overflow) Interrupt(4);",
	"Wait(9); pc = POP(); ps = POP(); psw.Value = POP();",
	"Wait(1); GroupShift8(1, false);",
	"Wait(1); GroupShift16(1, false);",
	"Wait(3); GroupShift8(cw.Low, false);",
	"Wait(3); GroupShift16(cw.Low, false);",
	"Wait(17); CVTBD(Fetch8());",
	"Wait(6); CVTDB(Fetch8());",
	"/* TODO: really invalid on V30MZ? undocumented mirror of TRANS/XLAT otherwise */",
	"Wait(4); aw.Low = ReadMemory8(SegmentViaPrefix(ds0), (ushort)(bw.Word + aw.Low));",
	"/* FPO1 -- not supported */",
	"/* '' */",
	"/* '' */",
	"/* '' */",
	"/* '' */",
	"/* '' */",
	"/* '' */",
	"/* '' */",
	"DBNZNE();",
	"DBNZE();",
	"DBNZ();",
	"BranchIf(cw.Word == 0);",
	"Wait(6); aw.Low = ReadPort8(Fetch8());",
	"Wait(6); aw.Word = ReadPort16(Fetch8());",
	"Wait(6); WritePort8(Fetch8(), aw.Low);",
	"Wait(6); WritePort16(Fetch8(), aw.Word);",
	"Wait(4); var offset = (short)Fetch16(); PUSH(pc); pc = (ushort)(pc + offset);",
	"Wait(3); var offset = (short)Fetch16(); pc = (ushort)(pc + offset);",
	"Wait(6); var pc = Fetch16(); var ps = Fetch16(); this.ps = ps; this.pc = pc;",
	"Wait(3); var offset = (sbyte)Fetch8(); pc = (ushort)(pc + offset);",
	"Wait(4); aw.Low = ReadPort8(dw.Word);",
	"Wait(4); aw.Word = ReadPort16(dw.Word);",
	"Wait(4); WritePort8(dw.Word, aw.Low);",
	"Wait(4); WritePort16(dw.Word, aw.Word);",
	"/* Prefix BUSLOCK */",
	"/* invalid */",
	"/* Prefix REPNE/REPNZ */",
	"/* Prefix REP/REPE/REPZ */",
	"Wait(8); isHalted = true;",
	"Wait(4); psw.Carry = !psw.Carry;",
	"Group1Misc8();",
	"Group1Misc16();",
	"Wait(4); psw.Carry = false;",
	"Wait(4); psw.Carry = true;",
	"Wait(4); psw.InterruptEnable = false;",
	"Wait(4); psw.InterruptEnable = true;",
	"Wait(4); psw.Direction = false;",
	"Wait(4); psw.Direction = true;",
	"Group2Misc8();",
	"Group2Misc16();"
};

if (handlers.Length != numInstructions)
{
	Host.LogErrors(new CompilerErrorCollection()
	{
		new CompilerError(Host.TemplateFile, -1, -1, "0", $"Handlers array size is wrong (expected {numInstructions}, got {handlers.Length})")
	});
}
#>

namespace StoicGoose.Core.CPU
{
	public sealed partial class V30MZ
	{
		readonly System.Action[] instructions = new System.Action[<#= numInstructions #>];
		
		private void GenerateInstructionHandlers()
		{
<# for (var i = 0; i < handlers.Length; i++) { #>
			instructions[<#= $"0x{i:X2}" #>] = () => { <#= handlers[i] #> };
<# } #>
		}
	}
}
